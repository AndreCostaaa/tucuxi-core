/*
* Copyright (C) 2017 Tucuxi SA
*/

#ifndef PROCESSINGRESPONSE_H
#define PROCESSINGRESPONSE_H

#include <string>
#include <vector>
#include <memory>

#include "tucucore/definitions.h"
#include "tucucore/dosage.h"

namespace Tucuxi {
namespace Core {


///
/// \brief The CycleData class, meant to embed data about a cycle
/// It contains concentrations and times for a single cycle (or interval)
class CycleData
{
public:

    /// \brief Absolute start time of the cycle
    Tucuxi::Common::DateTime m_start;

    /// \brief Absolute end time of the cycle
    /// This value could be computed from m_start and m_times, but it is more convenient
    /// To have it as a member variable
    Tucuxi::Common::DateTime m_end;

    /// \brief A serie of times exrpressed as offsets in millisecond to the start of a cycle
    std::vector<TimeOffsets> m_times;

    /// \brief A vector of vector of concentrations
    /// Each inner vector contains the concentrations of an analyte or a compartment
    /// The size of each inner vector has to be the same as m_times.
    std::vector< std::vector<Concentration> > m_concentrations;

    /// \brief Absolute end time of the cycle
    /// This value could be computed from m_start and m_times, but it is more convenient
    /// To have it as a member variable
    /// Area under curve for each prediction, in m_unit x hours
    std::vector<Value> m_aucs;

    /// \brief Unit of concentrations
    /// The area under curve corresponds to this unit times hours
    Unit m_unit;
};

///
/// \brief The SingleProcessingResponse class is the base class for every response
/// It only contains an identifier
///
class SingleProcessingResponse
{
public:

    RequestResponseId getId() const;

protected:

    SingleProcessingResponse(RequestResponseId _id);

    RequestResponseId m_id;
};


///
/// \brief The SinglePointsResponse class
/// This class contains data generated by a ProcessingTraitSinglePoints, that is
/// when values at specific times are asked by a request.
/// It is also the response for ProcessingTraitAtMeasures, that calculates
/// points at the measure times found in the DrugTreatment.
/// Therefore it offers the absolute times corresponding to the request as well
/// as the calculated concentrations at these points.
///
class SinglePointsResponse : public SingleProcessingResponse
{

    /// Absolute time of each concentration
    std::vector<Tucuxi::Common::DateTime> m_times;

    /// Concentration values
    std::vector<Concentrations> m_concentrations;

    /// Unit of concentrations
    Unit m_unit;
};

///
/// \brief The SinglePredictionResponse class
/// It contains data of a single prediction, as a vector of CycleData.
class SinglePredictionResponse : public SingleProcessingResponse
{

private:
    std::vector<CycleData> m_data;
};

///
/// \brief The FullDosage class
/// This class embeds all information about a potential dosage adjustment:
/// The dosage history, the score (suitability of the dosage), and concentrations
/// if the concentrations have been calculated
///
class FullDosage
{
public:

    DosageHistory m_history;
    double m_score;
    std::vector<CycleData> m_data;
};

///
/// \brief The AdjustmentResponse class
/// This class embeds a vector of potential adjustments, each one being a
/// Dosage history, a score, and optionnally a concentration prediction.
///
class AdjustmentResponse : public SinglePredictionResponse
{

protected:

    /// A vector of possible dosage adjustments
    std::vector<FullDosage> m_adjustments;
};

///
/// \brief The PercentilesResponse class
/// It shall contain different percentiles, for a certain period of time.
/// In order to embed all data necessary for correct exploitation, it contains:
/// 1. The percentile ranks as a vector of doubles, each one being in [0.0,100.0]
/// 2. The concentration of percentiles, as a vector of CycleMultiData,
///    one CycleData per percentile
///
class PercentilesResponse : public SinglePredictionResponse
{

    const PercentileRanks getRanks() const { return m_ranks;}


    std::vector<CycleData> m_data;

    PercentileRanks m_ranks;
};



///
/// \brief The ProcessingResponse class
/// It is the response to a ProcessingRequest object. It has an identifier and
/// a vector of SingleProcessingResponse, and as such can embed various responses,
/// like a prediction, various percentiles, and a dosage adjustment.
///
class ProcessingResponse
{
public:
    ProcessingResponse(RequestResponseId _id);

    RequestResponseId getId() const;
    void addResponse(std::unique_ptr<SingleProcessingResponse> _response);

    const std::vector<std::unique_ptr<SingleProcessingResponse> > & getResponses() const { return m_responses;}


protected:
    RequestResponseId m_id;
    std::vector<std::unique_ptr<SingleProcessingResponse> > m_responses;

};

}
}

#endif // PROCESSINGRESPONSE_H
